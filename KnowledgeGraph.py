import networkx as nx
from pyvis.network import Network
import json


class KnowledgeGraph:
    def __init__(self):
        self.graph = nx.DiGraph()  # Changed to DiGraph for directed graph

    def add_entity(self, label, file_name=None, line_numbers=None):
        self.graph.add_node(label, file_name=file_name, line_numbers=line_numbers)

    def add_relationship(self, entity1, entity2, relationship):
        self.graph.add_edge(entity1, entity2, label=relationship)  # Store label instead of relationship

    def visualize(self, filename='graph.html'):
        net = Network(notebook=True, directed=True)
        for node, data in self.graph.nodes(data=True):
            net.add_node(node, label=f"{node}")
        for edge in self.graph.edges(data=True):
            net.add_edge(edge[0], edge[1], label=edge[2]['label'])
        net.show(filename)

    def save(self, filename='knowledge_graph.json'):
        data = nx.node_link_data(self.graph)
        with open(filename, 'w') as f:
            json.dump(data, f)

    def load(self, filename='knowledge_graph.json'):
        with open(filename, 'r') as f:
            data = json.load(f)
        self.graph = nx.node_link_graph(data, directed=True)  # Ensure loaded graph is directed

    def load_from_dict(self, data):
        
        # Add nodes
        for node in data['nodes']:
            self.add_entity(
                node['label'],
                file_name=node.get('file_name'),
                line_numbers=node.get('line_numbers')
            )
        
        # Add edges
        for edge in data['edges']:
            self.add_relationship(edge['source'], edge['target'], edge['label'])

kg = KnowledgeGraph()
kg.load_from_dict({'nodes': [{'label': 'recursive_raptor', 'file_name': 'Raptor_index.py', 'line_numbers': '1-20'}, {'label': 'embeddings', 'file_name': 'Raptor_index.py', 'line_numbers': '1'}, {'label': 'summaries', 'file_name': 'Raptor_index.py', 'line_numbers': '1'}, {'label': 'model', 'file_name': 'Raptor_index.py', 'line_numbers': '1'}, {'label': 'level', 'file_name': 'Raptor_index.py', 'line_numbers': '1'}, {'label': 'max_levels', 'file_name': 'Raptor_index.py', 'line_numbers': '1'}, {'label': 'level > max_levels or len(embeddings) <= 1', 'file_name': 'Raptor_index.py', 'line_numbers': '2'}, {'label': 'summaries', 'file_name': 'Raptor_index.py', 'line_numbers': '3'}, {'label': 'n_clusters', 'file_name': 'Raptor_index.py', 'line_numbers': '5'}, {'label': 'min(5, len(embeddings))', 'file_name': 'Raptor_index.py', 'line_numbers': '5'}, {'label': 'gmm', 'file_name': 'Raptor_index.py', 'line_numbers': '6'}, {'label': "GaussianMixture(n_components=n_clusters, covariance_type='full', random_state=42)", 'file_name': 'Raptor_index.py', 'line_numbers': '6'}, {'label': 'n_clusters', 'file_name': 'Raptor_index.py', 'line_numbers': '6'}, {'label': "covariance_type='full'", 'file_name': 'Raptor_index.py', 'line_numbers': '6'}, {'label': 'random_state=42', 'file_name': 'Raptor_index.py', 'line_numbers': '6'}, {'label': 'gmm.fit(embeddings)', 'file_name': 'Raptor_index.py', 'line_numbers': '7'}, {'label': 'embeddings', 'file_name': 'Raptor_index.py', 'line_numbers': '7'}, {'label': 'probabilities', 'file_name': 'Raptor_index.py', 'line_numbers': '8'}, {'label': 'gmm.predict_proba(embeddings)', 'file_name': 'Raptor_index.py', 'line_numbers': '8'}, {'label': 'embeddings', 'file_name': 'Raptor_index.py', 'line_numbers': '8'}, {'label': 'cluster_texts', 'file_name': 'Raptor_index.py', 'line_numbers': '10'}, {'label': '[[] for _ in range(n_clusters)]', 'file_name': 'Raptor_index.py', 'line_numbers': '10'}, {'label': 'n_clusters', 'file_name': 'Raptor_index.py', 'line_numbers': '10'}, {'label': 'i', 'file_name': 'Raptor_index.py', 'line_numbers': '11'}, {'label': 'embedding', 'file_name': 'Raptor_index.py', 'line_numbers': '11'}, {'label': 'embeddings', 'file_name': 'Raptor_index.py', 'line_numbers': '11'}, {'label': 'cluster_idx', 'file_name': 'Raptor_index.py', 'line_numbers': '12'}, {'label': 'np.argmax(probabilities[i])', 'file_name': 'Raptor_index.py', 'line_numbers': '12'}, {'label': 'probabilities[i]', 'file_name': 'Raptor_index.py', 'line_numbers': '12'}, {'label': 'i', 'file_name': 'Raptor_index.py', 'line_numbers': '12'}, {'label': 'cluster_texts[cluster_idx].append(i)', 'file_name': 'Raptor_index.py', 'line_numbers': '13'}, {'label': 'cluster_idx', 'file_name': 'Raptor_index.py', 'line_numbers': '13'}, {'label': 'i', 'file_name': 'Raptor_index.py', 'line_numbers': '13'}, {'label': 'new_embeddings', 'file_name': 'Raptor_index.py', 'line_numbers': '15'}, {'label': 'new_summaries', 'file_name': 'Raptor_index.py', 'line_numbers': '16'}, {'label': 'indices', 'file_name': 'Raptor_index.py', 'line_numbers': '17'}, {'label': 'cluster_texts', 'file_name': 'Raptor_index.py', 'line_numbers': '17'}, {'label': 'texts', 'file_name': 'Raptor_index.py', 'line_numbers': '18'}, {'label': '[summaries[i] for i in indices]', 'file_name': 'Raptor_index.py', 'line_numbers': '18'}, {'label': 'i', 'file_name': 'Raptor_index.py', 'line_numbers': '18'}, {'label': 'indices', 'file_name': 'Raptor_index.py', 'line_numbers': '18'}, {'label': 'summary', 'file_name': 'Raptor_index.py', 'line_numbers': '19'}, {'label': 'summarize(texts)', 'file_name': 'Raptor_index.py', 'line_numbers': '19'}, {'label': 'texts', 'file_name': 'Raptor_index.py', 'line_numbers': '19'}, {'label': 'new_summaries.append(summary)', 'file_name': 'Raptor_index.py', 'line_numbers': '20'}, {'label': 'summary', 'file_name': 'Raptor_index.py', 'line_numbers': '20'}, {'label': 'new_embedding', 'file_name': 'Raptor_index.py', 'line_numbers': '21'}, {'label': 'model.encode([summary])[0]', 'file_name': 'Raptor_index.py', 'line_numbers': '21'}, {'label': 'summary', 'file_name': 'Raptor_index.py', 'line_numbers': '21'}, {'label': 'new_embeddings.append(new_embedding)', 'file_name': 'Raptor_index.py', 'line_numbers': '22'}, {'label': 'new_embedding', 'file_name': 'Raptor_index.py', 'line_numbers': '22'}, {'label': 'new_summaries', 'file_name': 'Raptor_index.py', 'line_numbers': '24'}, {'label': 'hierarchical_summaries', 'file_name': 'Raptor_index.py', 'line_numbers': '26'}, {'label': 'recursive_raptor(summary_embeddings, summaries, model)', 'file_name': 'Raptor_index.py', 'line_numbers': '26'}, {'label': 'summary_embeddings', 'file_name': 'Raptor_index.py', 'line_numbers': '26'}, {'label': 'summaries', 'file_name': 'Raptor_index.py', 'line_numbers': '26'}, {'label': 'model', 'file_name': 'Raptor_index.py', 'line_numbers': '26'}, {'label': 'print(hierarchical_summaries)', 'file_name': 'Raptor_index.py', 'line_numbers': '27'}, {'label': 'hierarchical_summaries', 'file_name': 'Raptor_index.py', 'line_numbers': '27'}],
'edges': [{'source': 'recursive_raptor', 'target': 'embeddings', 'label': 'has parameter'}, {'source': 'recursive_raptor', 'target': 'summaries', 'label': 'has parameter'}, {'source': 'recursive_raptor', 'target': 'model', 'label': 'has parameter'}, {'source': 'recursive_raptor', 'target': 'level', 'label': 'has parameter'}, {'source': 'recursive_raptor', 'target': 'max_levels', 'label': 'has parameter'}, {'source': 'recursive_raptor', 'target': 'level > max_levels or len(embeddings) <= 1', 'label': 'has condition'}, {'source': 'recursive_raptor', 'target': 'summaries', 'label': 'returns'}, {'source': 'recursive_raptor', 'target': 'n_clusters', 'label': 'has attribute'}, {'source': 'n_clusters', 'target': 'min(5, len(embeddings))', 'label': 'is assigned to'}, {'source': 'recursive_raptor', 'target': 'gmm', 'label': 'has attribute'}, {'source': 'gmm', 'target': "GaussianMixture(n_components=n_clusters, covariance_type='full', random_state=42)", 'label': 'is assigned to'}, {'source': "GaussianMixture(n_components=n_clusters, covariance_type='full', random_state=42)", 'target': 'n_clusters', 'label': 'has parameter'}, {'source': "GaussianMixture(n_components=n_clusters, covariance_type='full', random_state=42)", 'target': "covariance_type='full'", 'label': 'has parameter'}, {'source': "GaussianMixture(n_components=n_clusters, covariance_type='full', random_state=42)", 'target': 'random_state=42', 'label': 'has parameter'}, {'source': 'recursive_raptor', 'target': 'gmm.fit(embeddings)', 'label': 'calls'}, {'source': 'gmm.fit(embeddings)', 'target': 'embeddings', 'label': 'has parameter'}, {'source': 'recursive_raptor', 'target': 'probabilities', 'label': 'has attribute'}, {'source': 'probabilities', 'target': 'gmm.predict_proba(embeddings)', 'label': 'is assigned to'}, {'source': 'gmm.predict_proba(embeddings)', 'target': 'embeddings', 'label': 'has parameter'}, {'source': 'recursive_raptor', 'target': 'cluster_texts', 'label': 'has attribute'}, {'source': 'cluster_texts', 'target': '[[] for _ in range(n_clusters)]', 'label': 'is assigned to'}, {'source': '[[] for _ in range(n_clusters)]', 'target': 'n_clusters', 'label': 'uses'}, {'source': 'recursive_raptor', 'target': 'i', 'label': 'has loop variable'}, {'source': 'recursive_raptor', 'target': 'embedding', 'label': 'has loop variable'}, {'source': 'embedding', 'target': 'embeddings', 'label': 'is from'}, {'source': 'recursive_raptor', 'target': 'cluster_idx', 'label': 'has attribute'}, {'source': 'cluster_idx', 'target': 'np.argmax(probabilities[i])', 'label': 'is assigned to'}, {'source': 'np.argmax(probabilities[i])', 'target': 'probabilities[i]', 'label': 'has parameter'}, {'source': 'probabilities[i]', 'target': 'i', 'label': 'uses'}, {'source': 'recursive_raptor', 'target': 'cluster_texts[cluster_idx].append(i)', 'label': 'calls'}, {'source': 'cluster_texts[cluster_idx].append(i)', 'target': 'cluster_idx', 'label': 'uses'}, {'source': 'cluster_texts[cluster_idx].append(i)', 'target': 'i', 'label': 'uses'}, {'source': 'recursive_raptor', 'target': 'new_embeddings', 'label': 'has attribute'}, {'source': 'recursive_raptor', 'target': 'new_summaries', 'label': 'has attribute'}, {'source': 'recursive_raptor', 'target': 'indices', 'label': 'has loop variable'}, {'source': 'indices', 'target': 'cluster_texts', 'label': 'is from'}, {'source': 'recursive_raptor', 'target': 'texts', 'label': 'has attribute'}, {'source': 'texts', 'target': '[summaries[i] for i in indices]', 'label': 'is assigned to'}, {'source': '[summaries[i] for i in indices]', 'target': 'i', 'label': 'uses'}, {'source': '[summaries[i] for i in indices]', 'target': 'indices', 'label': 'uses'}, {'source': 'recursive_raptor', 'target': 'summary', 'label': 'has attribute'}, {'source': 'summary', 'target': 'summarize(texts)', 'label': 'is assigned to'}, {'source': 'summarize(texts)', 'target': 'texts', 'label': 'has parameter'}, {'source': 'recursive_raptor', 'target': 'new_summaries.append(summary)', 'label': 'calls'}, {'source': 'new_summaries.append(summary)', 'target': 'summary', 'label': 'uses'}, {'source': 'recursive_raptor', 'target': 'new_embedding', 'label': 'has attribute'}, {'source': 'new_embedding', 'target': 'model.encode([summary])[0]', 'label': 'is assigned to'}, {'source': 'model.encode([summary])[0]', 'target': 'summary', 'label': 'uses'}, {'source': 'recursive_raptor', 'target': 'new_embeddings.append(new_embedding)', 'label': 'calls'}, {'source': 'new_embeddings.append(new_embedding)', 'target': 'new_embedding', 'label': 'uses'}, {'source': 'recursive_raptor', 'target': 'new_summaries', 'label': 'returns'}, {'source': 'hierarchical_summaries', 'target': 'recursive_raptor(summary_embeddings, summaries, model)', 'label': 'is assigned to'}, {'source': 'recursive_raptor(summary_embeddings, summaries, model)', 'target': 'summary_embeddings', 'label': 'has parameter'}, {'source': 'recursive_raptor(summary_embeddings, summaries, model)', 'target': 'summaries', 'label': 'has parameter'}, {'source': 'recursive_raptor(summary_embeddings, summaries, model)', 'target': 'model', 'label': 'has parameter'}, {'source': 'print(hierarchical_summaries)', 'target': 'hierarchical_summaries', 'label': 'has parameter'}]})
kg.save()
kg.visualize()