{"directed": true, "multigraph": false, "graph": {}, "nodes": [{"file_name": "Raptor_index.py", "line_numbers": "1-20", "id": "recursive_raptor"}, {"file_name": "Raptor_index.py", "line_numbers": "11", "id": "embeddings"}, {"file_name": "Raptor_index.py", "line_numbers": "26", "id": "summaries"}, {"file_name": "Raptor_index.py", "line_numbers": "26", "id": "model"}, {"file_name": "Raptor_index.py", "line_numbers": "1", "id": "level"}, {"file_name": "Raptor_index.py", "line_numbers": "1", "id": "max_levels"}, {"file_name": "Raptor_index.py", "line_numbers": "2", "id": "level > max_levels or len(embeddings) <= 1"}, {"file_name": "Raptor_index.py", "line_numbers": "10", "id": "n_clusters"}, {"file_name": "Raptor_index.py", "line_numbers": "5", "id": "min(5, len(embeddings))"}, {"file_name": "Raptor_index.py", "line_numbers": "6", "id": "gmm"}, {"file_name": "Raptor_index.py", "line_numbers": "6", "id": "GaussianMixture(n_components=n_clusters, covariance_type='full', random_state=42)"}, {"file_name": "Raptor_index.py", "line_numbers": "6", "id": "covariance_type='full'"}, {"file_name": "Raptor_index.py", "line_numbers": "6", "id": "random_state=42"}, {"file_name": "Raptor_index.py", "line_numbers": "7", "id": "gmm.fit(embeddings)"}, {"file_name": "Raptor_index.py", "line_numbers": "8", "id": "probabilities"}, {"file_name": "Raptor_index.py", "line_numbers": "8", "id": "gmm.predict_proba(embeddings)"}, {"file_name": "Raptor_index.py", "line_numbers": "17", "id": "cluster_texts"}, {"file_name": "Raptor_index.py", "line_numbers": "10", "id": "[[] for _ in range(n_clusters)]"}, {"file_name": "Raptor_index.py", "line_numbers": "18", "id": "i"}, {"file_name": "Raptor_index.py", "line_numbers": "11", "id": "embedding"}, {"file_name": "Raptor_index.py", "line_numbers": "13", "id": "cluster_idx"}, {"file_name": "Raptor_index.py", "line_numbers": "12", "id": "np.argmax(probabilities[i])"}, {"file_name": "Raptor_index.py", "line_numbers": "12", "id": "probabilities[i]"}, {"file_name": "Raptor_index.py", "line_numbers": "13", "id": "cluster_texts[cluster_idx].append(i)"}, {"file_name": "Raptor_index.py", "line_numbers": "15", "id": "new_embeddings"}, {"file_name": "Raptor_index.py", "line_numbers": "24", "id": "new_summaries"}, {"file_name": "Raptor_index.py", "line_numbers": "18", "id": "indices"}, {"file_name": "Raptor_index.py", "line_numbers": "19", "id": "texts"}, {"file_name": "Raptor_index.py", "line_numbers": "18", "id": "[summaries[i] for i in indices]"}, {"file_name": "Raptor_index.py", "line_numbers": "21", "id": "summary"}, {"file_name": "Raptor_index.py", "line_numbers": "19", "id": "summarize(texts)"}, {"file_name": "Raptor_index.py", "line_numbers": "20", "id": "new_summaries.append(summary)"}, {"file_name": "Raptor_index.py", "line_numbers": "22", "id": "new_embedding"}, {"file_name": "Raptor_index.py", "line_numbers": "21", "id": "model.encode([summary])[0]"}, {"file_name": "Raptor_index.py", "line_numbers": "22", "id": "new_embeddings.append(new_embedding)"}, {"file_name": "Raptor_index.py", "line_numbers": "27", "id": "hierarchical_summaries"}, {"file_name": "Raptor_index.py", "line_numbers": "26", "id": "recursive_raptor(summary_embeddings, summaries, model)"}, {"file_name": "Raptor_index.py", "line_numbers": "26", "id": "summary_embeddings"}, {"file_name": "Raptor_index.py", "line_numbers": "27", "id": "print(hierarchical_summaries)"}], "links": [{"label": "has parameter", "source": "recursive_raptor", "target": "embeddings"}, {"label": "returns", "source": "recursive_raptor", "target": "summaries"}, {"label": "has parameter", "source": "recursive_raptor", "target": "model"}, {"label": "has parameter", "source": "recursive_raptor", "target": "level"}, {"label": "has parameter", "source": "recursive_raptor", "target": "max_levels"}, {"label": "has condition", "source": "recursive_raptor", "target": "level > max_levels or len(embeddings) <= 1"}, {"label": "has attribute", "source": "recursive_raptor", "target": "n_clusters"}, {"label": "has attribute", "source": "recursive_raptor", "target": "gmm"}, {"label": "calls", "source": "recursive_raptor", "target": "gmm.fit(embeddings)"}, {"label": "has attribute", "source": "recursive_raptor", "target": "probabilities"}, {"label": "has attribute", "source": "recursive_raptor", "target": "cluster_texts"}, {"label": "has loop variable", "source": "recursive_raptor", "target": "i"}, {"label": "has loop variable", "source": "recursive_raptor", "target": "embedding"}, {"label": "has attribute", "source": "recursive_raptor", "target": "cluster_idx"}, {"label": "calls", "source": "recursive_raptor", "target": "cluster_texts[cluster_idx].append(i)"}, {"label": "has attribute", "source": "recursive_raptor", "target": "new_embeddings"}, {"label": "returns", "source": "recursive_raptor", "target": "new_summaries"}, {"label": "has loop variable", "source": "recursive_raptor", "target": "indices"}, {"label": "has attribute", "source": "recursive_raptor", "target": "texts"}, {"label": "has attribute", "source": "recursive_raptor", "target": "summary"}, {"label": "calls", "source": "recursive_raptor", "target": "new_summaries.append(summary)"}, {"label": "has attribute", "source": "recursive_raptor", "target": "new_embedding"}, {"label": "calls", "source": "recursive_raptor", "target": "new_embeddings.append(new_embedding)"}, {"label": "is assigned to", "source": "n_clusters", "target": "min(5, len(embeddings))"}, {"label": "is assigned to", "source": "gmm", "target": "GaussianMixture(n_components=n_clusters, covariance_type='full', random_state=42)"}, {"label": "has parameter", "source": "GaussianMixture(n_components=n_clusters, covariance_type='full', random_state=42)", "target": "n_clusters"}, {"label": "has parameter", "source": "GaussianMixture(n_components=n_clusters, covariance_type='full', random_state=42)", "target": "covariance_type='full'"}, {"label": "has parameter", "source": "GaussianMixture(n_components=n_clusters, covariance_type='full', random_state=42)", "target": "random_state=42"}, {"label": "has parameter", "source": "gmm.fit(embeddings)", "target": "embeddings"}, {"label": "is assigned to", "source": "probabilities", "target": "gmm.predict_proba(embeddings)"}, {"label": "has parameter", "source": "gmm.predict_proba(embeddings)", "target": "embeddings"}, {"label": "is assigned to", "source": "cluster_texts", "target": "[[] for _ in range(n_clusters)]"}, {"label": "uses", "source": "[[] for _ in range(n_clusters)]", "target": "n_clusters"}, {"label": "is from", "source": "embedding", "target": "embeddings"}, {"label": "is assigned to", "source": "cluster_idx", "target": "np.argmax(probabilities[i])"}, {"label": "has parameter", "source": "np.argmax(probabilities[i])", "target": "probabilities[i]"}, {"label": "uses", "source": "probabilities[i]", "target": "i"}, {"label": "uses", "source": "cluster_texts[cluster_idx].append(i)", "target": "cluster_idx"}, {"label": "uses", "source": "cluster_texts[cluster_idx].append(i)", "target": "i"}, {"label": "is from", "source": "indices", "target": "cluster_texts"}, {"label": "is assigned to", "source": "texts", "target": "[summaries[i] for i in indices]"}, {"label": "uses", "source": "[summaries[i] for i in indices]", "target": "i"}, {"label": "uses", "source": "[summaries[i] for i in indices]", "target": "indices"}, {"label": "is assigned to", "source": "summary", "target": "summarize(texts)"}, {"label": "has parameter", "source": "summarize(texts)", "target": "texts"}, {"label": "uses", "source": "new_summaries.append(summary)", "target": "summary"}, {"label": "is assigned to", "source": "new_embedding", "target": "model.encode([summary])[0]"}, {"label": "uses", "source": "model.encode([summary])[0]", "target": "summary"}, {"label": "uses", "source": "new_embeddings.append(new_embedding)", "target": "new_embedding"}, {"label": "is assigned to", "source": "hierarchical_summaries", "target": "recursive_raptor(summary_embeddings, summaries, model)"}, {"label": "has parameter", "source": "recursive_raptor(summary_embeddings, summaries, model)", "target": "summary_embeddings"}, {"label": "has parameter", "source": "recursive_raptor(summary_embeddings, summaries, model)", "target": "summaries"}, {"label": "has parameter", "source": "recursive_raptor(summary_embeddings, summaries, model)", "target": "model"}, {"label": "has parameter", "source": "print(hierarchical_summaries)", "target": "hierarchical_summaries"}]}